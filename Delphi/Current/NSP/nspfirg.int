(*
       INTEL CORPORATION PROPRIETARY INFORMATION
This software is supplied under the terms of a license agreement or
nondisclosure agreement with Intel Corporation and may not be copied
or disclosed except in accordance with the terms of that agreement.
  Copyright (c) 1998-2000 Intel Corporation. All Rights Reserved.

From:    nspfirg.h
Purpose: Declaration of FIR filters design functions and structures.
Author:  Michael S. Kulikov.

  FUNCTIONS:
      nspdFirLowpass   -
                 computes the lowpass FIR filter coefficients;

      nspdFirHighpass  -
                 computes the highpass FIR filter coefficients;

      nspdFirBandpass  -
                 computes the bandpass FIR filter coefficients;

      nspdFirBandstop  -
                 computes the bandstop FIR filter coefficients.

  ARGUMENTS:
      rLowFreq  -
                 low frequency (0 < rLowFreq < 0.5);

      rHighFreq -
                 high frequency (0 < rHighFreq < 0.5)
                 (the condition rLowFreq < rHighFreq must be true!);

      taps      -
                 pointer to the array which specifies
                 the filter coefficients;

      tapsLen   -
                 the number of taps in taps[] array (tapsLen>=5);

      winType   -
                 the NSP_WindowType switch variable,
                 which specifies the smoothing window type;

      doNormal  -
                 if doNormal=0 the functions calculates
                 non-normalized sequence of filter coefficients,
                 in other cases the sequence of coefficients
                 will be normalized.

  RETURN:
      value from  NSP_fStatus enum.

  ENUMS:
      NSP_WindowType -
                 NSP_WinRect         no smoothing (smoothing by
                                     rectangular window);
                 NSP_WinBartlett     smoothing by Bartlett window;
                 NSP_WinBlackmanOpt  smoothing by optimal
                                     Blackman window;
                 NSP_WinHamming      smoothing by Hamming window;
                 NSP_WinHann         smoothing by Hann window.

      Return    -
                NSP_StsOk            no error;
                NSP_StsNullPtr       the null pointer to taps[] array pass
                                     to function;
                NSP_StsBadLen        the length of coefficient is less five;
                NSP_StsBadFreq       the low or high frequency isn’t satisfy
                                     the condition 0 < rLowFreq < 0.5;
                NSP_StsBadRel        the high frequency is less low.

*)

type
  TNSP_WindowType = (
    NSP_WinRect,
    NSP_WinBartlett,
    NSP_WinBlackmanOpt,
    NSP_WinHamming,
    NSP_WinHann);

function nspdFirLowpass( RFreq     : Double;
                         Taps      : PDouble;
                         TapsLen   : Integer;
                         WinType   : TNSP_WindowType;
                         DoNormal  : Integer) : Integer; stdcall;

function nspdFirHighpass(RFreq     : Double;
                         Taps      : PDouble;
                         TapsLen   : Integer;
                         WinType   : TNSP_WindowType;
                         DoNormal  : Integer) : Integer; stdcall;

function nspdFirBandpass(RLowFreq  : Double;
                         RHighFreq : Double;
                         Taps      : PDouble;
                         TapsLen   : Integer;
                         WinType   : TNSP_WindowType;
                         DoNormal  : Integer) : Integer; stdcall;

function nspdFirBandstop(RLowFreq  : Double;
                         RHighFreq : Double;
                         Taps      : PDouble;
                         TapsLen   : Integer;
                         WinType   : TNSP_WindowType;
                         DoNormal  : Integer) : Integer; stdcall;

{EOF}
